import argparse
from tc_study.experiment.downstream_task_evaluation import compute_all_truncated_downstream_tasks
from tc_study.experiment.variables_filter import compute_all_variable_indexes
from tc_study.experiment.unsupervised_evaluation import compute_all_truncated_unsupervised_metrics


def compute_passive_variables(args):
    compute_all_variable_indexes(args.model_path, args.overwrite, nb_proc=args.multiprocess)


def compute_unsupervised_metrics(args):
    compute_all_truncated_unsupervised_metrics(args.model_path, args.representation, overwrite=args.overwrite,
                                               nb_proc=args.multiprocess)


def compute_downstream_tasks(args):
    compute_all_truncated_downstream_tasks(args.model_path, args.representation, predictor=args.predictor,
                                           overwrite=args.overwrite)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Reproduce truncation experiment using dislib pre-trained VAE models")
    subparsers = parser.add_subparsers()

    pv = subparsers.add_parser("passive_variables", aliases=["pv", "variables"])
    pv.add_argument("model_path", type=str, help="Path where the pre-trained models are stored")
    pv.add_argument("--overwrite", "-o", action="store_true", help="Overwrite existing results")
    pv.add_argument("--multiprocess", "-m", nargs='?', const=4, type=int,
                    help="UNSTABLE: Performs distributed computation")
    pv.set_defaults(func=compute_passive_variables)

    um = subparsers.add_parser("unsupervised_metrics", aliases=["um"])
    um.add_argument("model_path", type=str, help="Path where the pre-trained models are stored")
    um.add_argument("representation", type=str, choices=["mean", "sampled"],
                    help="Representation from which we need to compute unsupervised scores")
    um.add_argument("--overwrite", "-o", action="store_true", help="Overwrite existing results")
    um.add_argument("--multiprocess", "-m", nargs='?', const=4, type=int,
                    help="UNSTABLE: Performs distributed computation")
    um.set_defaults(func=compute_unsupervised_metrics)

    dt = subparsers.add_parser("downstream_tasks", aliases=["dt", "tasks"])
    dt.add_argument("model_path", type=str, help="Path where the pre-trained models are stored")
    dt.add_argument("representation", type=str, choices=["mean", "sampled"],
                    help="Representation which will be used for downstream tasks")
    dt.add_argument("predictor", type=str, choices=["logistic_regression_cv", "gradient_boosting_classifier"],
                    help="Predictor function to use")
    dt.add_argument("--overwrite", "-o", action="store_true", help="Overwrite existing results")
    um.add_argument("--multiprocess", "-m", nargs='?', const=4, type=int,
                    help="UNSTABLE: Performs distributed computation")
    dt.set_defaults(func=compute_downstream_tasks)

    res = parser.parse_args()
    res.func(res)
