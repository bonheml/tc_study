import argparse

from tc_study.visualization.visualization import draw_all_tc_vp, draw_all_downstream_task_reg
from tc_study.visualization.visualization import draw_all_truncated_scores


def draw_passive_variables(args):
    draw_all_tc_vp(args.data_path, args.output_path, args.metric)


def draw_downstream_task_scores(args):
    draw_all_downstream_task_reg(args.data_path, args.output_path)


def draw_truncated_scores(args):
    draw_all_truncated_scores(args.data_path, args.output_path, args.metric)


if __name__ == "__main__":
    # /media/bonheml/phd_data/VAE_TC_study/aggregated_results
    metric_choices = ["gaussian_total_correlation", "gaussian_wasserstein_correlation",
                      "gaussian_wasserstein_correlation_norm", "mutual_info_score",
                      "adjusted_mutual_info_score", "norm_mutual_info_score"]
    parser = argparse.ArgumentParser(description="Reproduce figures from the paper")
    subparsers = parser.add_subparsers()

    pv = subparsers.add_parser("passive_variables", aliases=["pv"])
    pv.add_argument("data_path", type=str, help="Path where the aggregated results are stored")
    pv.add_argument("output_path", type=str, help="Path where the figures will be stored")
    pv.add_argument("metric", type=str, choices=metric_choices, help="Metric to use")
    pv.set_defaults(func=draw_passive_variables)

    dt = subparsers.add_parser("downstream_task", aliases=["dt"])
    dt.add_argument("data_path", type=str, help="Path where the aggregated results are stored")
    dt.add_argument("output_path", type=str, help="Path where the figures will be stored")
    dt.set_defaults(func=draw_downstream_task_scores)

    ts = subparsers.add_parser("truncated_scores", aliases=["ts"])
    ts.add_argument("data_path", type=str, help="Path where the aggregated results are stored")
    ts.add_argument("output_path", type=str, help="Path where the figures will be stored")
    ts.add_argument("metric", type=str, choices=metric_choices, help="Metric to use")
    ts.set_defaults(func=draw_truncated_scores)

    res = parser.parse_args()
    res.func(res)
